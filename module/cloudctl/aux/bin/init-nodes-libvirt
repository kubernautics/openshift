#!/bin/bash -x
ocpVers="4.5.3"
name_RHCOS_IMG="rhcos-${ocpVers}-x86_64-metal.x86_64.raw.gz"
name_RHCOS_INST_KERNEL="rhcos-${ocpVers}-x86_64-installer-kernel-x86_64"
name_RHCOS_INST_INITRAMFS="rhcos-${ocpVers}-x86_64-installer-initramfs.x86_64.img"

target_ARTIFACTS_IGN="http://nginx.ocp.ministack.dev:8080/ignition"
target_ARTIFACTS_BOOT="http://nginx.ocp.ministack.dev:8080/boot"

dir_OCP4_MODULES="${HOME}/.ccio/ocp-mini-stack/module"
dir_OCP4_DNSMASQ="${dir_OCP4_MODULES}/dnsmasq/aux"
dir_OCP4_HTML="${dir_OCP4_MODULES}/nginx/aux/html"
dir_OCP4_TFTP="${dir_OCP4_MODULES}/tftpd/aux/tftpboot/pxelinux.cfg"
dir_OCP4_DHCP="${dir_OCP4_MODULES}/isc-dhcp/aux/config/dhcp"

dir_OCP4_INVENTORY="${HOME}/.ccio/ocp-mini-stack/build/inventory"
mkdir -p ${dir_OCP4_INVENTORY} 2>/dev/null
#################################################################################
# Logging Function
echo_log () {
  if [[ $1 == "0" ]]; then
	  echo "STAT>> $2 ..."
  elif [[ $1 == "2" ]]; then
	  echo "WARN>> $2 ..."
  elif [[ $1 == "1" ]]; then
	  echo "ERROR>> $2"
	  echo "ERROR>> Critical Exiting!"
          exit 1
  elif [[ $1 == "9" ]]; then
	  echo "STAT>> $2"
	  echo "STAT>> Testing Break, Exiting now!"
          exit 1
  fi
}

#################################################################################
# Priviledge Check
#[[ $EUID -ne 0 ]] && echo_log 1 "This script must be run as root!"

#################################################################################
# Virtual Machine Variables
name_BASE="ocp.ministack.dev"
vm_CPU=8            # CPU Count
vm_master_RAM=16384 # in Megabytes
vm_worker_RAM=32768 # in Megabytes
root_DISK=120       # in Gigabytes
master_COUNT=03     # Set VM spawn count
worker_COUNT=02     # Set VM spawn count
storage_POOL="/var/lib/libvirt/images"

#################################################################################
run_boot_all () {
  virsh -c qemu+ssh://root@10.10.10.2/system start bootstrap.ocp.ministack.dev
  echo_log 0 "Waiting for bootstrap node to start ... "
  sleep 150
  for guest_TARGET in $(virsh -c qemu+ssh://root@10.10.10.2/system list --all | grep ${name_BASE} | grep master | grep "off" | awk '{print $2}'); do
	  virsh -c qemu+ssh://root@10.10.10.2/system start ${guest_TARGET}
	  sleep 8
  done
  echo_log 0 "Waiting for masters to install ... "
  sleep 360
  for guest_TARGET in $(virsh -c qemu+ssh://root@10.10.10.2/system list --all | grep ${name_BASE} | grep master | grep "off" | awk '{print $2}'); do
	  virsh -c qemu+ssh://root@10.10.10.2/system start ${guest_TARGET}
	  sleep 8
  done
}
#################################################################################
# Prompt for cluster start
req_boot () {

  echo_log 0 "All nodes ready to boot for cloud ${name_BASE}"

  if [[ ${safety_BOOL} == "0" ]]; then
    while true; do
      read -rp "       Would you like to start this cluster now? " yn
        case $yn in
          [Yy]* ) echo_log 0 "Booting cluster now" ; 
                  run_boot_all
                  break
                  ;;
          [Nn]* ) echo_log 2 "Exiting without cluster up due to user input"
                  ;;
              * ) echo "$SEP_2 Please answer yes or no." ;;
        esac
      break
    done
  fi
}

#################################################################################
spawn_build () {
echo_log 0 "Creating Libvirt VM ${name_FULL}"

  # Define Virtual Machine
  virt-install \
    --pxe \
    --hvm \
    --cpu host \
    --graphics none \
    --cpu host-passthrough \
    --noautoconsole \
    --vcpus=${vm_CPU} \
    --memory=${1} \
    --name=${name_FULL} \
    --connect=qemu+ssh://root@10.10.10.2/system \
    --boot 'hd,network,useserial=on' \
    --description "RHCOS OCP ${node_ROLE}" \
    --network network=ocp-mini-stack,model=virtio,mac=${eth0_HWADDR} \
    --disk path=${storage_POOL}/${name_FULL}_vda.qcow2,format=qcow2,bus=virtio,sparse=true,cache=unsafe,size=${root_DISK}

  # Halt System (will boot manually later)
  sleep 1 && virsh -c qemu+ssh://root@10.10.10.2/system destroy ${name_FULL} 2>/dev/null

}

#################################################################################
stage_pxe_cfg_worker () {
echo_log 0 "Generating default worker pxelinux.cfg boot files..."

cat <<EOF >${dir_OCP4_TFTP}/worker.cfg
prompt 0
default worker
label   worker
  menu  worker
  kernel ${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_KERNEL} initrd=${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_INITRAMFS}
  append coreos.inst=yes coreos.inst.install_dev=vda ip=dhcp rd.neednet=1 coreos.first_boot=1 console=tty0 console=ttyS0 coreos.inst.image_url=${target_ARTIFACTS_BOOT}/${name_RHCOS_IMG} coreos.inst.ignition_url=${target_ARTIFACTS_IGN}/worker.ign coreos.config.url=${target_ARTIFACTS_IGN}/worker.ign 
EOF
echo_log  0 "Boot configuration file written to ${dir_OCP4_TFTP}/worker.cfg"
}

#################################################################################
stage_pxe_cfg_master () {
echo_log 0 "Generating pxelinux.cfg master boot file for host: ${eth0_IP} ${eth0_HEXIP}"

cat <<EOF >${dir_OCP4_TFTP}/infra.cfg
prompt 0
default master
label   master
  menu  master
  kernel  ${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_KERNEL} ip=dhcp rd.neednet=1 initrd=${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_INITRAMFS} console=tty0 console=ttyS0 coreos.inst=yes coreos.inst.install_dev=vda coreos.inst.image_url=${target_ARTIFACTS_BOOT}/${name_RHCOS_IMG} coreos.inst.ignition_url=${target_ARTIFACTS_IGN}/master.ign
  append coreos.first_boot=1 coreos.config.url=${target_ARTIFACTS_IGN}/master.ign
EOF

echo_log 0 "Boot configuration file written to ${dir_OCP4_TFTP}/infra.cfg"
}

#################################################################################
stage_pxe_cfg_bootstrap () {
echo_log 0 "Generating pxelinux.cfg bootstap boot file for host: ${eth0_IP} ${eth0_HEXIP}"


cat <<EOF >${dir_OCP4_TFTP}/bootstrap.cfg
timeout 0
default bootstrap
label   bootstrap
  menu  bootstrap
  kernel  ${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_KERNEL} ip=dhcp rd.neednet=1 initrd=${target_ARTIFACTS_BOOT}/${name_RHCOS_INST_INITRAMFS} console=tty0 console=ttyS0 coreos.inst=yes coreos.inst.install_dev=vda coreos.inst.image_url=${target_ARTIFACTS_BOOT}/${name_RHCOS_IMG} coreos.inst.ignition_url=${target_ARTIFACTS_IGN}/bootstrap.ign
  append coreos.first_boot=1 coreos.config.url=${target_ARTIFACTS_IGN}/bootstrap.ign
EOF

echo_log 0 "Boot configuration file written to ${dir_OCP4_TFTP}/bootstrap.cfg"
}

#################################################################################
spawn_prep () {
echo_log 0 "Generating interface profile"

  # Generate unique repeatable eth0 MAC address
  eth0_HWADDR=$(echo "$HOSTNAME ${name_FULL} ocp-mini-stack ${eth0_IP} libvirt" \
    | md5sum \
    | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02\\:\1\\:\2\\:\3\\:\4\\:\5/')

}

#################################################################################
write_dhcp_pxe_cfg () {
cat <<EOF >>$1
host ${node_ROLE}${name_NUM} {
  fixed-address  ${eth0_IP};
  option host-name "${node_ROLE}${name_NUM}.${name_BASE}";
  hardware ethernet $(echo ${eth0_HWADDR} | sed 's/\\//g');
}
EOF
}

#################################################################################
run_spawn () {
node_ROLE=$1
echo_log 0 "Initializing Nodes: ${node_ROLE}"

  # Build bootstrap
  if [[ ${node_ROLE} == "bootstrap" ]]; then

      # Set VM Name & Declare Build
      name_FULL="${node_ROLE}.${name_BASE}"
      echo_log 0 "Initializing .. ${name_FULL}"

      # Generate node variables
      spawn_prep

      # Log to /etc/ethers & write pxelinux menu seed files
      eth0_IP='172.10.0.30'
      name_NUM=''
      write_dhcp_pxe_cfg "${dir_OCP4_DHCP}/bootstrap.pxe"
      stage_pxe_cfg_bootstrap


      # Init node
      spawn_build ${vm_master_RAM}

  # Build Masters
  elif [[ ${node_ROLE} == "master" ]]; then
    build_COUNT=0
    for count in $(seq -w 01 ${master_COUNT}); do
      
      # Track build count
      build_COUNT=$((${build_COUNT}+1))

      # Set VM Name & Declare Build
      name_SMOL="${node_ROLE}${count}"
      name_FULL="${node_ROLE}${count}.${name_BASE}"
      echo_log 0 "Initializing .. ${name_FULL}"
       
      # Generate node variables
      spawn_prep

      # Log to /etc/ethers & write pxelinux menu seed files
      eth0_IP="172.10.1.3${build_COUNT}"
      name_NUM="0${build_COUNT}"
      write_dhcp_pxe_cfg "${dir_OCP4_DHCP}/infra.pxe"

      # Init node
      spawn_build ${vm_master_RAM}
      stage_pxe_cfg_master

    done
    
  # Build Workers
  elif [[ ${node_ROLE} == "worker" ]]; then
    for count in $(seq -w 01 ${worker_COUNT}); do

      # Set VM Name & Declare Build
      name_SMOL="${node_ROLE}${count}"
      name_FULL="${node_ROLE}${count}.${name_BASE}"
      echo_log 0 "Initializing .. ${name_FULL}"

      # Generate node variables
      spawn_prep

      # Log to /etc/ethers
      eth0_IP=$(echo 172.10.2.$(echo ${count} | sed 's/0/4/g'))
      name_NUM="${count}"
      write_dhcp_pxe_cfg "${dir_OCP4_DHCP}/worker.pxe"

      # Init node
      spawn_build ${vm_worker_RAM}
      stage_pxe_cfg_worker

    done
  fi
}

#################################################################################
# Purge / Clean / Prep
run_clean () {
  echo_log 0 "Executing PreRun Cleanup/Prep Routine"

  # Check for existing ocp-mini-stack nodes
  guest_LIST="$(virsh -c qemu+ssh://root@10.10.10.2/system list --all \
               | grep ${name_BASE} \
               | awk '{print $2}')" 

  # Destroy & Undefine libvirt guests
  for guest_TARGET in ${guest_LIST}; do
    virsh -c qemu+ssh://root@10.10.10.2/system destroy  ${guest_TARGET} 2>/dev/null
    virsh -c qemu+ssh://root@10.10.10.2/system undefine ${guest_TARGET} 2>/dev/null
  done

  # Remove libvirt guest disk images
  ssh root@10.10.10.2 'rm -rf /var/lib/libvirt/images/*${name_BASE}* 2>/dev/null'

  # Clear straggling ovs interfaces
  ssh root@10.10.10.2 'TERM=screen ovs-clear'
  
  # Clear TFTP Boot Menu(s)
  echo '' > ${dir_OCP4_TFTP}/worker.cfg
  echo '' > ${dir_OCP4_TFTP}/master.cfg
  echo '' > ${dir_OCP4_TFTP}/bootstrap.cfg

  # Clear DHCP Boot Config(s)
  echo '' > ${dir_OCP4_DHCP}/infra.pxe
  echo '' > ${dir_OCP4_DHCP}/worker.pxe
  echo '' > ${dir_OCP4_DHCP}/master.pxe
  echo '' > ${dir_OCP4_DHCP}/bootstrap.pxe
}

#################################################################################
safety_check () {
safety_BOOL=$(virsh -c qemu+ssh://root@10.10.10.2/system list --all | grep ${name_BASE} 2>&1 1>/dev/null; echo $?)

  echo_log 0 "Executing PreRun Safety Check"

  if [[ ${safety_BOOL} == "0" ]]; then
  echo_log 2 "Detected previous build for local cloud: ${name_BASE}"
  echo_log 2 "Continuing will destroy the preexisting cluster..."
    while true; do
      read -rp "Are you sure you want to continue? (yes/no): " yn
        case $yn in
          [Yy]* ) echo_log 2 "Continuing with purge and cleanup" ; 
                  run_clean
                  break
                  ;;
          [Nn]* ) echo_log 1 "Aborting due to user input!"
                  ;;
              * ) echo "$SEP_2 Please answer yes or no." ;;
        esac
      break
    done
  fi
}

#################################################################################
run_core () {
safety_check
run_clean
run_spawn bootstrap
run_spawn master
run_spawn worker
#req_boot
}

run_core
